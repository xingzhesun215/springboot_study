工具类项目记录
2022 0608
1)数据库支持
1,添加数据库mysql支持以及原始jdbc数据库查询依赖支持
        <!--1, jdbc -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jdbc</artifactId>
        </dependency>
        <!--2, myql驱动 -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
        </dependency>
2,添加数据库驱动信息及mysql数据库地址及账号密码等信息到信息配置类
# 配置数据库驱动
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
# 配置数据库url
spring.datasource.url=jdbc:mysql://39.105.218.225:3306/sun_db?useUnicode=true&characterEncoding=utf-8&serverTimezone=UTC
# 配置数据库用户名
spring.datasource.username=root
# 配置数据库密码
spring.datasource.password=root
3,domain保存实体类,dao保存数据访问类,在controller中通过dao访问数据库的domain

2022 0609
1)使用Druid数据库连接池,以实现数据库的监控
1,添加依赖支持
        <!--3, springboot druid -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid-spring-boot-starter</artifactId>
            <version>1.1.22</version>
        </dependency>
2,添加配置信息
# 指定数据源类型 druid need
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
3,添加配置类DruidConfig,使用Configuration修饰,包括登录账号及密码等信息
http://localhost:1006/druid admin   admin

2022 0610
1)添加日志功能
常规操作
1,#设置日志级别(只有WARM以上的才显示)
logging.level.root=WARN
2,在使用的位置引用并打印日志
  		private Logger logger = LoggerFactory.getLogger(this.getClass());
        logger.debug("hello debug");
        logger.error("hello error");
        logger.warn("hello warn");
3,也可以设置日志保存文件
# 3设置日志文件(study5_utils/spring-boot-log.log)
logging.file.name=spring-boot-log.log
非常规操作 使用 lombok 插件简化日志代码/使用Hrisey Plugins也可,其内置lombok
1,添加lombok依赖支持
	    <!-- lombok -->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<version>1.18.12</version>
			<scope>provided</scope>
		</dependency>
2,直接使用,不用实例化log对象 @log
        log.warning("hello debug");
        log.info( "hello info");

3,超神做法 使用配置文件,在清单文件写入日志配置目录
1)# 指定logback配置文件，位于resources目录下
logging.config=classpath:logback-spring.xml
2)引入目录,logback-spring.xml

2)定时任务功能
1,添加Component注解,添加Scheduled注解支持方法,在Application加入EnableScheduling以开启定时任务
2,@Scheduled(fixedRate = 2000)每2秒执行一次
3,@Scheduled(fixedDelay = 2000)执行当次后2秒后再执行
4,也可以使用cron进行定时
5,需要更加全面的功能,可以使用Quartz依赖

3)拦截器功能
1,拦截类实现接口HandlerInterceptor接口
2,配置类实现接口WebMvcConfigurer,同时@Configuration注解支持

